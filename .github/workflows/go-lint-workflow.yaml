name: Standard Go Lint Workflow

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: true
      ECR_REGISTRY:
        required: true
    inputs:
      timeout:
        type: string
        default: "3m"
        required: false
      working-directory:
        type: string
        required: false
      only-new-issues:
        type: boolean
        required: false
        default: true
      go-version:
        type: string
        required: false
        default: "1.24.6"
      golangci-lint-version:
        type: string
        required: false
        default: "v1.64.8"
      golangci-lint-action-version:
        type: string
        required: false
        default: "v6"
      golangci-lint-config-repo:
        type: string
        required: false
        default: "Typeform/golang-builder"
      golangci-lint-config-repo-ref:
        type: string
        required: false
        default: "1.15.0"
      golangci-lint-config-repo-path:
        type: string
        required: false
        default: "lint-config"

jobs:
  lint:
    if: ${{ !contains('Bot', github.event.pull_request.user.type) }}
    name: Run linter
    runs-on: 'ubuntu-latest'

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v5

      - name: Check out repository containing linter config
        uses: actions/checkout@v5
        with:
          repository: ${{ inputs.golangci-lint-config-repo }}
          ref: ${{ inputs.golangci-lint-config-repo-ref }}
          path: ${{ inputs.golangci-lint-config-repo-path }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global url."https://${TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          export GOPRIVATE=github.com/Typeform/*

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ inputs.go-version }}
          cache: false

      - name: golangci-lint
        id: runlint
        uses: jenseng/dynamic-uses@v1
        with:
          uses: golangci/golangci-lint-action@${{ inputs.golangci-lint-action-version }}
          with: |
            {
              "version": ${{ toJSON(inputs.golangci-lint-version) }},
              "only-new-issues": ${{ toJSON(inputs.only-new-issues) }},
              "working-directory": ${{ toJSON(inputs.working-directory) }},
              "verify": false,
              "args": ${{ toJSON(format('--config {0}/{1}/config/golangci.yaml --timeout={2}', github.workspace, inputs.golangci-lint-config-repo-path, inputs.timeout)) }}
            }

      - name: Comment body
        id: comment-body-content
        if: ${{ !contains(github.ref, 'refs/heads/master') && !contains(github.ref, 'refs/heads/main') && (success() || failure()) }}
        run: |
          if [[ "${{ steps.runlint.outcome }}" == "success" ]]; then
            echo "results=$(echo ":tada::tada: **Congratulations! Your code seems to be really nice!** :tada::tada:")" >> $GITHUB_OUTPUT
          else
            echo "results=$(echo ":rotating_light::rotating_light: **There are linting issues, check the \`Files changed\` tab for more info** :rotating_light::rotating_light:")" >> $GITHUB_OUTPUT
          fi

      - name: Find previous lint comment
        if: ${{ !contains(github.ref, 'refs/heads/master') && !contains(github.ref, 'refs/heads/main') && (success() || failure()) }}
        uses: peter-evans/find-comment@v4
        id: previous-lint-comment
        with:
          issue-number: ${{ github.event.number }}
          body-includes: To run the linter locally

      - name: Publish lint comment
        if: ${{ !contains(github.ref, 'refs/heads/master') && !contains(github.ref, 'refs/heads/main') && (success() || failure()) }}
        uses: peter-evans/create-or-update-comment@v5
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        with:
          comment-id: ${{ steps.previous-lint-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          edit-mode: replace
          body: |
            ${{ steps.comment-body-content.outputs.results }}

            To run the linter locally, please, run this command:
            ```
            docker run --rm -e GITHUB_TOKEN -v $PWD:/app -w /app ${{env.ECR_REGISTRY}}/golang-builder:latest sh -c 'init-git && golangci-lint run --config /golangci.yaml --fix --new-from-rev main ./...'
            ```
