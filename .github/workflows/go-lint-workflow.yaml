name: Standard Go Lint Workflow

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: true
      ECR_REGISTRY:
        required: true
    inputs:
      working-directory:
        type: string
        required: false
      only-new-issues:
        type: boolean
        required: false
        default: true
      go-version:
        type: string
        required: false
        default: "1.21.6"
      golangci-lint-version:
        type: string
        required: false
        default: "v1.54.2"

jobs:
  lint:
    if: ${{ !contains('Bot', github.event.pull_request.user.type) }}
    name: Run linter
    runs-on: [self-hosted, automated-checks-ephemeral]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Parse Repository Name
        id: repo-name
        run: echo "name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Check out repository containing linter config
        uses: actions/checkout@v4
        with:
          repository: Typeform/golang-builder
          ref: main
          path: lint-config
          token: ${{ secrets.GH_TOKEN }}

      - name: Set local imports
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "<repository>"
          replace: ${{ steps.repo-name.outputs.name }}
          regex: false
          include: "lint-config/config/golangci.yaml"

      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global url."https://${TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          export GOPRIVATE=github.com/Typeform/*

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        id: golangci-lint
        with:
          version: ${{ inputs.golangci-lint-version }}
          only-new-issues: ${{ inputs.only-new-issues }}
          working-directory: ${{ inputs.working-directory }}
          args: --config ${{ github.workspace }}/lint-config/config/golangci.yaml --exclude-dirs="(^|/)vendor($|/)" --issues-exit-code=1

      - name: Comment body
        id: comment-body-content
        if: ${{ !contains(github.ref, 'refs/heads/master') && !contains(github.ref, 'refs/heads/main') && (success() || failure()) }}
        run: |
          if [[ "${{ steps.golangci-lint.conclusion }}" == "success" ]]; then
            echo "results=$(echo ":tada::tada: **Congratulations! Your code seems to be really nice!** :tada::tada:")" >> $GITHUB_OUTPUT
          else
            echo "results=$(echo ":rotating_light::rotating_light: **There are linting issues, check the \`Files changed\` tab for more info** :rotating_light::rotating_light:")" >> $GITHUB_OUTPUT
          fi

      - name: Find previous lint comment
        if: ${{ !contains(github.ref, 'refs/heads/master') && !contains(github.ref, 'refs/heads/main') && (success() || failure()) }}
        uses: peter-evans/find-comment@v2
        id: previous-lint-comment
        with:
          issue-number: ${{ github.event.number }}
          body-includes: To run the linter locally

      - name: Publish lint comment
        if: ${{ !contains(github.ref, 'refs/heads/master') && !contains(github.ref, 'refs/heads/main') && (success() || failure()) }}
        uses: peter-evans/create-or-update-comment@v2
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        with:
          comment-id: ${{ steps.previous-lint-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          edit-mode: replace
          body: |
            ${{ steps.comment-body-content.outputs.results }}

            To run the linter locally, please, run this command:
            ```
            docker run --rm \
              -v $PWD:/app:ro \
              -w /app \
                ${{env.ECR_REGISTRY}}/golang-builder:latest lint-repository ${{ steps.repo-name.outputs.name }}
            ```
