name: "Generate persisted operations"

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: true

jobs:
  update-allow-list:
    runs-on: [self-hosted, ci-universal]
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GRAPHQL_ENDPOINTS: |
        https://graphqlbff.staging.internal.tfdev.typeform.tf
        https://graphqlbff.tfprod.internal.typeform.tf
        https://graphqlbff.tfprod.internal.eu.typeform.tf
        https://graphqlbff.tfprod.internal.eu-central-1.typeform.tf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Yarn
        run: npm install -g yarn@1.22.22

      - name: Set GitHub packages registry
        run: |
          npm config set '//npm.pkg.github.com/:_authToken' ${{ secrets.GH_TOKEN }}
          npm config set @typeform:registry https://npm.pkg.github.com/

      - name: Check if GraphQL endpoints are reachable
        run: |
          readarray -t ENDPOINTS <<< "$GRAPHQL_ENDPOINTS"
          for url in "${ENDPOINTS[@]}"; do
            [[ -z "$url" ]] && continue  # skip empty lines
            echo "Pinging $url..."
            curl_exit_code=0
            curl --max-time 10 "$url?runNumber=$GITHUB_RUN_NUMBER" || curl_exit_code=$?
            if [ $curl_exit_code -ne 0 ]; then
              echo "❌ Curl command failed with exit code $curl_exit_code"
              exit $curl_exit_code
            fi
          done

      - name: Install only @typeform/generate-persisted-operations-manifest
        run: |
          mkdir persisted-ops-generator
          cd persisted-ops-generator
          yarn init -y
          yarn add --no-lockfile --non-interactive --dev \
            @typeform/generate-persisted-operations-manifest \
            @apollo/generate-persisted-query-manifest@^1.2.2 \
            @apollo/client@^3.7.0 \
            graphql@^16.0.0
          cd ..

      - name: Generate Persisted Operations
        run: |
          node persisted-ops-generator/node_modules/@typeform/generate-persisted-operations-manifest/dist/index.js
        env:
          GQL_MANIFEST_DOCUMENTS: '["**/*.{js,ts,tsx,graphql}","!**/*.d.ts","!**/*.spec.{ts,tsx}","!**/*.test.{ts,tsx}","!node_modules/**","!persisted-ops-generator/**"]'
          GQL_MANIFEST_OUTPUT: "generated/persisted-query-manifest.json"

      - name: Add custom persisted operation
        run: |
          # Read the generated manifest
          manifest=$(cat generated/persisted-query-manifest.json)

          # Create the new operation entry
          new_operation='{
            "id": "674469b2cda3134e3f5d2ff6e676e1b2201511d614252150d45695ce30e1748d",
            "name": "GetPublishedFormAndJobs",
            "type": "query",
            "body": "query GetPublishedFormAndJobs($formId: ID!, $getDraft: Boolean!) {\n  form(id: $formId) {\n    id\n    links {\n      display\n      __typename\n    }\n    fields {\n      ...FieldsFragment\n      __typename\n    }\n    thankyouScreens {\n      ref\n      title\n      type\n      __typename\n    }\n    hidden {\n      key\n      __typename\n    }\n    variables\n    followUps {\n      id\n      name\n      status\n      trigger {\n        type\n        properties\n        __typename\n      }\n      tasks {\n        id\n        status\n        type\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  draft(id: $formId) @include(if: $getDraft) {\n    id\n    links {\n      display\n      __typename\n    }\n    fields {\n      ...FieldsFragment\n      __typename\n    }\n    thankyouScreens {\n      ref\n      title\n      type\n      __typename\n    }\n    hidden {\n      key\n      __typename\n    }\n    variables\n    __typename\n  }\n}\n\nfragment ChoiceFragment on Choice {\n  ref\n  label\n  __typename\n}\n\nfragment FieldsFragment on FormField {\n  ...FieldsFragmentWithoutGroup\n  ...GroupFieldsFragment\n  ...InlineGroupFieldsFragment\n  __typename\n}\n\nfragment FieldsFragmentWithoutGroup on FormField {\n  ...FormFieldFragment\n  ... on PictureChoiceField {\n    properties {\n      ... on PictureChoiceFieldProperties {\n        allow_other_choice: allowOtherChoice\n        choices {\n          ...ChoiceFragment\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on MultipleChoiceField {\n    properties {\n      ... on MultipleChoiceFieldProperties {\n        allow_other_choice: allowOtherChoice\n        choices {\n          ...ChoiceFragment\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on DropdownField {\n    properties {\n      ... on DropdownFieldProperties {\n        choices {\n          ...ChoiceFragment\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on AddressField {\n    properties {\n      ... on AddressFieldProperties {\n        fields {\n          ... on FormField {\n            subfield_key: subfieldKey\n            ...FormFieldFragment\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on ContactInfoField {\n    properties {\n      ... on ContactInfoFieldProperties {\n        fields {\n          ... on FormField {\n            subfield_key: subfieldKey\n            ...FormFieldFragment\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on MatrixField {\n    properties {\n      ... on MatrixFieldProperties {\n        fields {\n          ...FormFieldFragment\n          ... on MultipleChoiceField {\n            properties {\n              ... on MultipleChoiceFieldProperties {\n                allow_other_choice: allowOtherChoice\n                choices {\n                  ...ChoiceFragment\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on RankingField {\n    properties {\n      ... on RankingFieldProperties {\n        choices {\n          ...ChoiceFragment\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FormFieldFragment on FormField {\n  title\n  type\n  ref\n  validations\n  __typename\n}\n\nfragment GroupFieldsFragment on FormField {\n  ... on GroupField {\n    ...FormFieldFragment\n    properties {\n      ... on GroupFieldProperties {\n        fields {\n          ...FieldsFragmentWithoutGroup\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment InlineGroupFieldsFragment on FormField {\n  ... on InlineGroupField {\n    ...FormFieldFragment\n    properties {\n      ... on InlineGroupFieldProperties {\n        fields {\n          ...FieldsFragmentWithoutGroup\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}"
          }'

          # Use jq to add the new operation to the operations array
          echo "$manifest" | jq --argjson new_op "$new_operation" '.operations += [$new_op]' > generated/persisted-query-manifest.json

      - name: List generated files
        run: |
          echo "Listing contents of ./generated directory:"
          ls -la generated

      - name: Display persisted-query-manifest.json
        run: |
          echo "Contents of generated/persisted-query-manifest.json:"
          cat generated/persisted-query-manifest.json

      - name: Extract app name from package.json
        run: |
          echo "APP_NAME=$(jq -r '.name' package.json | sed 's/@typeform\///')" >> $GITHUB_ENV

      - name: Print extracted app name
        run: echo "Extracted APP_NAME is ${{ env.APP_NAME }}"

      - name: Upload manifest to internal allow list for all endpoints
        run: |
          mapfile -t ENDPOINTS <<< "${GRAPHQL_ENDPOINTS}"
          curl_exit_code=0
          for url in "${ENDPOINTS[@]}"; do
            [[ -z "$url" ]] && continue  # skip empty lines
            echo "Uploading manifest to $url/internal/operation-allow-list?deploymentRunNumber=$GITHUB_RUN_NUMBER&appName=${APP_NAME}"
            curl --fail --max-time 30 -X PATCH "$url/internal/operation-allow-list?deploymentRunNumber=$GITHUB_RUN_NUMBER&appName=${APP_NAME}" \
              -H "Content-Type: application/json" \
              --data-binary "@generated/persisted-query-manifest.json"

            if [ $? -ne 0 ]; then
              echo "❌ Failed to upload manifest to $url"
              curl_exit_code=1
            else
              echo "✅ Successfully uploaded to $url"
            fi
          done

          if [ $curl_exit_code -ne 0 ]; then
            echo "❌ One or more uploads failed, failing workflow"
            exit $curl_exit_code
          fi
